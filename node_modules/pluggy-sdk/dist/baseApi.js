"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const node_fetch_1 = require("node-fetch");
class BaseApi {
    constructor(params) {
        this.showUrls = false;
        const { clientId, clientSecret, baseUrl = 'https://api.pluggy.ai', showUrls = false } = params;
        this.baseUrl = baseUrl;
        this.showUrls = showUrls;
        if (clientSecret && clientId) {
            this.clientId = clientId;
            this.clientSecret = clientSecret;
        }
        else {
            throw new Error('Missing authorization for API communication');
        }
    }
    getApiKey() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.apiKey) {
                return this.apiKey;
            }
            const response = yield node_fetch_1.default(`${this.baseUrl}/auth`, {
                method: 'post',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    clientId: this.clientId,
                    clientSecret: this.clientSecret,
                    nonExpiring: false,
                }),
            });
            const { apiKey } = yield response.json();
            this.apiKey = apiKey;
            return apiKey;
        });
    }
    createGetRequest(endpoint, params) {
        return __awaiter(this, void 0, void 0, function* () {
            const apiKey = yield this.getApiKey();
            const url = `${this.baseUrl}/${endpoint}${this.mapToQueryString(params)}`;
            if (this.showUrls) {
                console.log(url);
            }
            return node_fetch_1.default(url, {
                method: 'get',
                headers: {
                    'X-API-KEY': apiKey,
                },
            })
                .then((response) => __awaiter(this, void 0, void 0, function* () {
                try {
                    const json = yield response.json();
                    if (response.status !== 200) {
                        return Promise.reject(json);
                    }
                    else {
                        return Promise.resolve(json);
                    }
                }
                catch (_a) {
                    const message = yield response.text();
                    return Promise.reject({ message });
                }
            }))
                .catch(error => {
                console.warn(`[API] HTTP request failed: ${error.message || ''}`, error);
                return Promise.reject(error);
            });
        });
    }
    createPostRequest(endpoint, params, body) {
        return this.createMutationRequest('post', endpoint, params, body);
    }
    createPutRequest(endpoint, params, body) {
        return this.createMutationRequest('put', endpoint, params, body);
    }
    createPatchRequest(endpoint, params, body) {
        return this.createMutationRequest('patch', endpoint, params, body);
    }
    createDeleteRequest(endpoint, params, body) {
        return this.createMutationRequest('delete', endpoint, params, body);
    }
    createMutationRequest(method, endpoint, params, body) {
        return __awaiter(this, void 0, void 0, function* () {
            const apiKey = yield this.getApiKey();
            const url = `${this.baseUrl}/${endpoint}${this.mapToQueryString(params)}`;
            if (this.showUrls) {
                console.log(url);
            }
            if (body) {
                Object.keys(body).forEach(key => (body[key] === undefined ? delete body[key] : {}));
            }
            return node_fetch_1.default(url, {
                method,
                headers: {
                    'X-API-KEY': apiKey,
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(body),
            }).then((response) => __awaiter(this, void 0, void 0, function* () {
                try {
                    const json = yield response.json();
                    if (response.status !== 200) {
                        return Promise.reject(json);
                    }
                    else {
                        return Promise.resolve(json);
                    }
                }
                catch (_a) {
                    const message = yield response.text();
                    return Promise.reject({ message });
                }
            }));
        });
    }
    mapToQueryString(params) {
        if (!params) {
            return '';
        }
        const query = Object.keys(params)
            .filter(key => params[key] !== undefined && params[key] !== null)
            .map(key => key + '=' + params[key])
            .join('&');
        return `?${query}`;
    }
}
exports.BaseApi = BaseApi;
